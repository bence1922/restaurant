openapi: 3.0.3
info:
  title: Swagger Restaurant
  description: |-
    This is a sample Restaruant
  version: 1.0.1
externalDocs:
  description: Find out more about this program on github.
  url: https://github.com/bence1922/restaurant
servers:
  - url: http://localhost:8084
tags:
  - name: auth
  - name: user
  - name: employee
  - name: customer
  - name: table
  - name: booking
  - name: table-order
  - name: customer-order
  - name: menu

paths:
  /auth/login:
    post:
      tags: 
        - auth
      summary: User login
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: User successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSession'
        '401':
          description: Unauthorized
        '400':
          description: Invalid request
  /auth/logout:
    get:
      tags:
        - auth
      summary: Logs out current logged in user
      description: ''
      operationId: logout
      security:
        - sessionId: []
      responses:
        default:
          description: successful operation
  /auth/password-reset:
    patch:
      tags: 
        - auth
      summary: Password reset
      operationId: passwordReset
      security:
        - sessionId: []
      parameters:
        - name: userId
          in: header
          description: The ID of the user
          required: true
          schema:
            type: string
            example: "ObjectId('6544cd596955fe0a1c04fba9')"
        - name: oldPassword
          in: header
          schema: { type: string }
          required: true
        - name: newPassword
          in: header
          schema: { type: string }
          required: true
      responses:
        '200':
          description: successfully updated
        '401':
          description: Unauthorized
        '400':
          description: Invalid request
  /user/{userId}:
    parameters:
      - name: userId
        in: path
        description: The ID of the user
        required: true
        schema:
          type: string
          example: "ObjectId('6544cd596955fe0a1c04fba9')"
    get:
      tags:
        - user
      summary: Get user by ID
      operationId: getUserById
      security:
      - sessionId: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user by ID
      operationId: updateUserById
      security:
      - sessionId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '405':
          description: Validation exception
    delete:
      tags:
        - user
      summary: Delete user by ID
      operationId: deleteUserById
      security:
      - sessionId: []
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found

  /employee:
    get:
      tags:
        - employee
      summary: Get all employees
      operationId: getEmployees
      security:
      - sessionId: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'          
        '400':
          description: Invalid status value
    post:
      tags:
        - employee
      summary: Register an employee
      operationId: registerEmployee
      security:
      - sessionId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: Employee not found
        '405':
          description: Validation exception
  /customer:
    get:
      tags: 
        - customer
      summary: Get all customers
      operationId: listCustomers
      security:
      - sessionId: []
      responses:
        '200':
          description: A list of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags: 
        - customer
      summary: Customer registration
      operationId: registerCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '201':
          description: User successfully registered
        '400':
          description: Invalid request
  /customer/{userId}/booking:
    parameters:
      - name: userId
        in: path
        schema: { type: string }
        required: true
    get:
      tags:
        - customer
      summary: Query bookings for customer
      description: 
      operationId: queryCustomerBookings
      parameters:
        - name: from
          in: header
          schema:
            type: string
            format: date-time
          required: false
        - name: to
          in: header
          schema:
            type: string
            format: date-time
          required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
                      
        '405':
          description: Invalid input
  /customer/{userId}/invoice/{orderId}:
    parameters:
      - name: orderId
        in: path
        description: ID of the order for which to generate an invoice
        required: true
        schema:
          type: string
          example: ObjectId('6544cd596955fe0a1c04fba9')
      - name: userId
        in: path
        description: The ID of the user
        required: true
        schema:
          type: string
          example: "ObjectId('6544cd596955fe0a1c04fba9')"
    get:
      tags:
        - customer
      summary: Get an invoice in PDF format by orderId
      operationId: getInvoice
      security:
      - sessionId: []
      responses:
        '200':
          description: Invoice PDF
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '404':
          description: Order not found
  
  /table:
    get:
      tags:
        - table
      summary: List tables
      description: Returns a single table
      operationId: listTables
      security:
        - sessionId: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Table'
        '400':
          description: Invalid table-number supplied
        '404':
          description: Table not found
  /table/{table-number}:
    parameters:
      - name: table-number
        in: path
        description: number of table to return
        required: true
        schema:
          type: integer
          example: 10
    get:
      tags:
        - table
      summary: Finds table by number
      description: Returns a single table
      operationId: findTable
      security:
      - sessionId: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        '400':
          description: Invalid table-number supplied
        '404':
          description: Table not found
    patch:
      tags:
        - table
      summary: Create or update table by number
      operationId: patchTable
      security:
      - sessionId: []
      parameters:
        - name: capacity
          in: header
          schema: { type: integer }
          required: false
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        '405':
          description: Invalid input
    delete:
      tags:
        - table
      summary: Deletes table by number
      operationId: deleteTable
      security:
      - sessionId: []
      responses:
        '400':
          description: Invalid table id
  /booking:
    get:
      tags:
        - booking
      summary: Query bookings
      description: 
      operationId: queryBookings
      security:
      - sessionId: []
      parameters:
        - name: table-number
          in: header
          schema: { type: integer }
          required: false
        - name: customer-name
          in: header
          schema: { type: string }
          required: false
        - name: from
          in: header
          schema:
            type: string
            format: date-time
          required: false
        - name: to
          in: header
          schema:
            type: string
            format: date-time
          required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
                      
        '405':
          description: Invalid input
    post:
      tags:
        - booking
      summary: Book table
      operationId: bookTable
      security:
      - sessionId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBooking'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'

        '405':
          description: Invalid input
  /booking/{id}:
    parameters:
      - name: id
        in: path
        schema: { type: string }
        required: true
    get:
      tags:
        - booking
      summary: Get booking
      operationId: getBooking
      security:
      - sessionId: []
      responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Booking'

          '405':
            description: Invalid input
    patch:
      tags:
        - booking
      summary: Update booking status
      operationId: bookingStatusUpdate
      security:
      - sessionId: []
      parameters:
        - name: status
          in: header
          schema: 
            type: string
            enum:
              - pending
              - accepted
          required: true
      responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Booking'
          '405':
            description: Invalid input
  /booking/table/avaible:
    get:
      tags:
        - booking
      summary: Query avaible tables
      description: 
      operationId: queryTablesForBooking
      security:
      - sessionId: []
      parameters:
        - name: from
          in: header
          schema:
            type: string
            format: date-time
          required: true
        - name: to
          in: header
          schema:
            type: string
            format: date-time
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Table'
                      
        '405':
          description: Invalid input

  /table-order:
    get:
      tags:
        - table-order
      summary: Query table orders
      description: Place a new order in the store
      operationId: queryTableOrders
      security:
      - sessionId: []
      parameters:
        - name: table-number
          in: header
          schema: { type: integer }
          required: false
        - name: is-current
          in: header
          schema: { type: boolean }
          required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TableOrder'
        '405':
          description: Invalid input
  /table-order/{table-number}:
    get:
      tags:
        - table-order
      summary: Find the current order for the table
      description: Place a new order in the store
      operationId: findTableOrder
      security:
      - sessionId: []
      parameters:
        - name: table-number
          in: path
          schema: { type: integer }
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableOrder'
        '405':
          description: Invalid input

    post:
      tags:
        - table-order
      summary: Place an order
      description: Place a new order in the store
      operationId: placeOrder
      security:
      - sessionId: []
      parameters:
        - name: table-number
          in: path
          schema: { type: integer }
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableOrder'
        '405':
          description: Invalid input
  
  /customer-order:
    get:
      tags:
        - customer-order
      summary: Query customer orders
      description: 
      operationId: queryCustomerOrders
      security:
      - sessionId: []
      parameters:
        - name: customer-name
          in: header
          schema: { type: string }
          required: false
        - name: is-current
          in: header
          schema: { type: boolean }
          required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerOrder'
        '405':
          description: Invalid input
  /customer-order/{userId}:
    parameters:
      - name: userId
        in: path
        schema: { type: string }
        required: true
    get:
      tags:
        - customer-order
      summary: Query orders for customer
      description: 
      operationId: queryCustomerOrderForCustomer
      security:
      - sessionId: []
      parameters:
        - name: is-current
          in: header
          schema: { type: boolean }
          required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input

    post:
      tags:
        - customer-order
      summary: Place an order
      description:
      operationId: order
      security:
      - sessionId: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input

  /menu/drink:
    get:
      tags:
        - menu
      summary: Get all drink items
      operationId: getDrinkMenu
      responses:
        '200':
          description: List of drink items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Drink'
    post:
      tags:
        - menu
      summary: Add a new drink item
      operationId: addDrinkToMenu
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Drink'
      responses:
        '201':
          description: Drink item added successfully
        '400':
          description: Invalid request
  /menu/drink/{drinkId}:
    parameters:
      - name: drinkId
        in: path
        description: ID of the menu item to retrieve/update/delete
        required: true
        schema:
          type: string
    get:
      tags:
        - menu
      summary: Get menu item details by ID
      operationId: getDrink
      responses:
        '200':
          description: Menu item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Drink'
        '404':
          description: Menu item not found

    patch:
      tags:
        - menu
      summary: Partially update menu item details by ID using query parameters
      operationId: updateDrink
      parameters:
        - name: name
          in: query
          description: New name for the menu item
          schema:
            type: string
        - name: price
          in: query
          description: New price for the menu item
          schema:
            type: integer
      responses:
        '200':
          description: Menu item partially updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Drink'
        '404':
          description: Menu item not found
        '400':
          description: Invalid request

    delete:
      tags:
        - menu
      summary: Delete menu item by ID
      operationId: deleteDrink
      responses:
        '204':
          description: Menu item deleted successfully
        '404':
          description: Menu item not found

  /menu/food:
    get:
      tags:
        - menu
      summary: Get all food items
      operationId: getFoodMenu
      responses:
        '200':
          description: List of food items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Food'
    post:
      tags:
        - menu
      summary: Add a new food item
      operationId: addFoodToMenu
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Food'
      responses:
        '201':
          description: Food item added successfully
        '400':
          description: Invalid request
  /menu/food/{foodId}:
    parameters:
      - name: foodId
        in: path
        description: ID of the menu item to retrieve/update/delete
        required: true
        schema:
          type: string

    get:
      tags:
        - menu
      summary: Get menu item details by ID
      operationId: getFood
      responses:
        '200':
          description: Menu item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'
        '404':
          description: Menu item not found

    patch:
      tags:
        - menu
      summary: Partially update menu item details by ID using query parameters
      operationId: updateFood
      parameters:
        - name: name
          in: query
          description: New name for the menu item
          schema:
            type: string
        - name: price
          in: query
          description: New price for the menu item
          schema:
            type: integer
      responses:
        '200':
          description: Menu item partially updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'
        '404':
          description: Menu item not found
        '400':
          description: Invalid request

    delete:
      tags:
        - menu
      summary: Delete menu item by ID
      operationId: deleteFood
      responses:
        '204':
          description: Menu item deleted successfully
        '404':
          description: Menu item not found
  /stock/food:
    get:
      summary: Get all food stock items
      operationId: getAllFoodStockItems
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FoodStockItem'
    
    post:
      summary: Create a new food stock item
      operationId: createFoodStockItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodStockItem'
      responses:
        '201':
          description: Food stock item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodStockItem'
        '400':
          description: Invalid input
  /stock/food/{foodStockItemId}: 
    parameters:
      - name:  foodStockItemId
        in: path
        description: ID of the foodStockItem to retrieve/update/delete
        required: true
        schema:
          type: string
    patch:
      summary: Partially update a food stock item
      operationId: partiallyUpdateFoodStockItem
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Name of the food stock item to update
        - in: query
          name: quantity
          schema:
            type: integer
            format: int32
          description: New quantity of the food stock item
        - in: query
          name: unit
          schema:
            type: string
            enum:
              - kg
              - liter
              - g
              - dkg
              - dl
          description: New unit of the food stock item
      responses:
        '200':
          description: Food stock item partially updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodStockItem'
        '400':
          description: Invalid input
        '404':
          description: Food stock item not found
    
    delete:
      summary: Delete a food stock item
      operationId: deleteFoodStockItem
      responses:
        '204':
          description: Food stock item deleted successfully
        '404':
          description: Food stock item not found

  /stock/drink:
    get:
      summary: Get all drink stock items
      operationId: getAllDrinkStockItems
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DrinkStockItem'

    post:
      summary: Create a new drink stock item
      operationId: createDrinkStockItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DrinkStockItem'
      responses:
        '201':
          description: Drink stock item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DrinkStockItem'
        '400':
          description: Invalid input

  /stock/drink/{drinkStockItemId}:
    parameters:
      - name: drinkStockItemId
        in: path
        description: ID of the drinkStockItem to retrieve/update/delete
        required: true
        schema:
          type: string
    patch:
      summary: Partially update a drink stock item
      operationId: partiallyUpdateDrinkStockItem
      parameters:
        - in: query
          name: name
          schema:
            type: string
          description: Name of the drink stock item to update
        - in: query
          name: quantity
          schema:
            type: integer
            format: int32
          description: New quantity of the drink stock item
      responses:
        '200':
          description: Drink stock item partially updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DrinkStockItem'
        '400':
          description: Invalid input
        '404':
          description: Drink stock item not found

    delete:
      summary: Delete a drink stock item
      operationId: deleteDrinkStockItem
      responses:
        '204':
          description: Drink stock item deleted successfully
        '404':
          description: Drink stock item not found


components:
  schemas:
    Table:
      required:
        - number
        - capacity
      type: object
      properties:
        number:
          type: integer
          format: int32
          example: 10
        capacity:
          type: integer
          format: int32
          example: 10
        status:
          type: string
          enum: [booked, free]
    Booking:
      required:
        - id
        - table
        - customer
        - startingDate
        - endingDate
        - status
        - peopleCount
      type: object
      properties:
        id:
          type: string
          example: ObjectId('6544cd596955fe0a1c04fba9')
        table:
          $ref: '#/components/schemas/Table'
        customer:
          $ref: '#/components/schemas/User'
        startingDate:
          type: string
          format: date-time
        endingDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [pending, accepted]
        peopleCount:
          type: integer
        note:
          type: string
          example: "az egyik fő egy kisbaba"
    NewBooking:
      required:
        - table-number
        - user-id
        - startingDate
        - endingDate
        - peopleCount
      type: object
      properties:
        table-number:
          type: integer
          example: 3
        user-id:
          type: string
          example: 6544cd596955fe0a1c04fba9
        startingDate:
          type: string
          format: date-time
        endingDate:
          type: string
          format: date-time
        peopleCount:
          type: integer
        note:
          type: string
          example: "az egyik fő egy kisbaba"
    Food:
      required:
        - name
        - price
        - id
        - type
      type: object
      properties:
        id:
          type: string
          example: 6544cd596955fe0a1c04fba9
        name:
          type: string
          example: Hamburger
        type:
          type: string
          example: Főétel
        price:
          type: integer
          example: 400
        recipe:
          type: array
          items:
            type: object
            properties:
              ingerient:
                type: string
              unit:
                type: string
                enum:
                  - g
                  - dkg
              quantity:
                type: integer
    FoodOrderItem:
        required:
          - food
          - quantity
        type: object
        properties:
          food: 
            $ref: '#/components/schemas/Food'
          quantity:
            type: integer
            format: int32
            example: 1
    Drink:
      required:
        - name
        - price
        - id
        - type
      type: object
      properties:
        id:
          type: string
          example: 6544cd596955fe0a1c04fba9
        name:
          type: string
          example: Cola
        type: 
          type: string
          example: Üdítő
        price:
          type: integer
          example: 400
    DrinkOrderItem:
        required:
          - drink
          - quantity
        type: object
        properties:
          drink: 
            $ref: '#/components/schemas/Drink'
          quantity:
            type: integer
            format: int32
            example: 1
    Order:
      required:
        - foods
        - drinks
      type: object
      properties:
        id:
          type: string
          example: 6544cd596955fe0a1c04fba9
        status:
          type: string
          enum: [placed, cooking, delivering, delivered]
        date:
          type: string
          format: date-time
        note:
          type: string
        foods:
          type: array
          items:
            $ref: '#/components/schemas/FoodOrderItem'
        drinks:
          type: array
          items:
            $ref: '#/components/schemas/DrinkOrderItem'
    CustomerOrder:
      type: object
      properties:
        customer: 
          $ref: '#/components/schemas/User'
        order: 
          $ref: '#/components/schemas/Order'
    TableOrder:
      type: object
      properties:
        table: 
          $ref: '#/components/schemas/Table'
        order: 
          $ref: '#/components/schemas/Order'

    FoodStockItem:
      required:
        - name
        - quantity
        - unit
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          example: hús
        quantity:
          type: integer
          format: int32
          example: 1
        unit:
          type: string
          example: kg
          enum:
            - kg
            - liter
            - g
            - dkg
            - dl
    DrinkStockItem:
      required:
        - name
        - quantity
      type: object
      properties:
        id: 
          type: string
        name:
          type: string
          example: coke
        quantity:
          type: integer
          format: int32
          example: 1
    UserRegister:
      required:
        - name
        - email
        - mobil
        - address
        - password
      type: object
      properties:
        name:
          type: string
          example: Gipsz Jakap
        email:
          type: string
          example: gipsz@jakab.com
        mobil:
          type: string
          example: +36709834234
        address:
          type: string
          example: Budapest Lakatos utca 6.
        password:
          type: string
          example: password
    UserLogin:
      required:
        - name
        - password
      type: object
      properties:
        name:
          type: string
          example: Nick User
        password:
          type: string
          example: password
    User:
      required:
        - name
        - email
        - mobil
        - address
      type: object
      properties:
        id:
          type: string
          example: ObjectId('6544cd596955fe0a1c04fba9')
        name:
          type: string
          example: Gipsz Jakap
        email:
          type: string
          example: gipsz@jakab.com
        mobil:
          type: string
          example: +36709834234
        address:
          type: string
          example: Budapest Lakatos utca 6.
    UserSession:
      required:
        - id
        - user
        - role
      type: object
      properties:
        id:
          type: string
          example: "ObjectId('6544cd596955fe0a1c04fba9')"
        user:
          $ref: '#/components/schemas/User'
        role:
          type: string
          example: "admin"
    MenuItem:
      type: object
      properties:
        name:
          type: string
        price:
          type: integer

  securitySchemes:
    sessionId:
      type: apiKey
      in: header
      name: sessionId