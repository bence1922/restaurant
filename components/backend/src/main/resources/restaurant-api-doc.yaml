openapi: 3.0.3
info:
  title: Swagger Restaurant
  description: |-
    This is a sample Restaruant
  version: 1.0.1
externalDocs:
  description: Find out more about this program on github.
  url: https://github.com/bence1922/restaurant
servers:
  - url: http://localhost:8084
tags:
  - name: user
  - name: employee
  - name: customer
  - name: table
  - name: booking
  - name: table-order
  - name: customer-order
  - name: menu

paths:
  /employee:
    get:
      tags:
        - employee
      summary: Get all employees
      operationId: getEmployees
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
        '400':
          description: Invalid status value
  /employee/{employeeId}:
    parameters:
      - name: employeeId
        in: path
        description: The ID of the employee
        required: true
        schema:
          type: integer
          example: 1
    get:
      tags:
        - employee
      summary: Get an employee by ID
      operationId: getEmployeeById
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '404':
          description: Employee not found

    put:
      tags:
        - employee
      summary: Update an existing employee by ID
      operationId: updateEmployeeById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Invalid ID supplied
        '404':
          description: Employee not found
        '405':
          description: Validation exception
    patch:
      tags:
        - employee
      summary: Update attributes of an employee by ID
      operationId: patchEmployeeById
      parameters:
        - name: name
          in: query
          description: New name for the employee
          required: false
          schema:
            type: string
        - name: role
          in: query
          description: New role for the employee
          required: false
          schema:
            type: string
            enum:
              - waiter
              - manager
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Invalid ID supplied
        '404':
          description: Employee not found
    delete:
      tags:
        - employee
      summary: Delete an employee by ID
      operationId: deleteEmployeeById
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Employee not found

  /user:
    get:
      tags:
        - user
      summary: Get all users
      description: ''
      operationId: getUsers
      parameters: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /user/register:
    post:
      tags: 
        - user
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User successfully registered
        '400':
          description: Invalid request
  /user/login:
    post:
      tags: 
        - user
      summary: User login
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User successfully logged in
        '401':
          description: Unauthorized
        '400':
          description: Invalid request
  /user/logout:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: 
        - name: username
          in: header
          required: true
          schema:
            type: string
            example: 'almasbukta'
      responses:
        default:
          description: successful operation
  /user/{username}:  
    parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
          example: 'almasbukta'
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  
  /customer:
    get:
      tags: 
        - customer
      summary: Get a list of customers
      operationId: listCustomers
      responses:
        '200':
          description: A list of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
    post:
      tags: 
        - customer
      summary: Create a new customer
      operationId: createCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Customer created successfully
        '400':
          description: Invalid request
  /customer/{customerId}:
    parameters:
      - name: customerId
        in: path
        description: ID of the customer to retrieve/update/delete
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags: 
        - customer
      summary: Get customer details by ID
      operationId: getCustomer
      responses:
        '200':
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDetails'
        '404':
          description: Customer not found
    patch:
      tags: 
        - customer
      summary: Partially update customer details by ID
      operationId: createOrUpdateCustomer
      parameters:
        - name: name
          in: query
          description: New name for the customer
          schema:
            type: string
        - name: email
          in: query
          description: New email for the customer
          schema:
            type: string
        - name: mobil
          in: query
          description: New mobile number for the customer
          schema:
            type: string
        - name: address
          in: query
          description: New address for the customer
          schema:
            type: string
        - name: company
          in: query
          description: New company name for the customer
          schema:
            type: string
        - name: tax
          in: query
          description: New tax ID for the customer
          schema:
            type: string
      responses:
        '200':
          description: Customer partially updated successfully
        '404':
          description: Customer not found
        '400':
          description: Invalid request
    delete:
      tags: 
        - customer
      summary: Delete customer by ID
      operationId: deleteCustomer
      responses:
        '204':
          description: Customer deleted successfully
        '404':
          description: Customer not found 
  /invoice/{orderId}:
    parameters:
      - name: orderId
        in: path
        description: ID of the order for which to generate an invoice
        required: true
        schema:
          type: string
          example: ObjectId('6544cd596955fe0a1c04fba9')
    get:
      tags:
        - customer
      summary: Get an invoice in PDF format by orderId
      operationId: getInvoice
      responses:
        '200':
          description: Invoice PDF
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        '404':
          description: Order not found
  
  /table:
    get:
      tags:
        - table
      summary: List tables
      description: Returns a single table
      operationId: listTables
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Table'
        '400':
          description: Invalid table-number supplied
        '404':
          description: Table not found
  /table/{table-number}:
    parameters:
      - name: table-number
        in: path
        description: number of table to return
        required: true
        schema:
          type: integer
          example: 10
    get:
      tags:
        - table
      summary: Finds table by number
      description: Returns a single table
      operationId: findTable
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        '400':
          description: Invalid table-number supplied
        '404':
          description: Table not found
    patch:
      tags:
        - table
      summary: Create or update table by number
      operationId: patchTable
      parameters:
        - name: capacity
          in: header
          schema: { type: integer }
          required: false
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        '405':
          description: Invalid input
    delete:
      tags:
        - table
      summary: Deletes table by number
      operationId: deleteTable
      responses:
        '400':
          description: Invalid table id

  /booking:
    get:
      tags:
        - booking
      summary: Query bookings
      description: 
      operationId: queryBookings
      parameters:
        - name: table-number
          in: header
          schema: { type: integer }
          required: false
        - name: customer-name
          in: header
          schema: { type: string }
          required: false
        - name: from
          in: header
          schema:
            type: string
            format: date-time
          required: false
        - name: to
          in: header
          schema:
            type: string
            format: date-time
          required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
                      
        '405':
          description: Invalid input
    post:
      tags:
        - booking
      summary: Book table
      operationId: bookTable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBooking'
        required: true
      responses:
        '200':
          description: successful operation
        '405':
          description: Invalid input
  /booking/table:
    get:
      tags:
        - booking
      summary: Query avaible tables
      description: 
      operationId: queryTablesForBooking
      parameters:
        - name: from
          in: header
          schema:
            type: string
            format: date-time
          required: false
        - name: to
          in: header
          schema:
            type: string
            format: date-time
          required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Table'
                      
        '405':
          description: Invalid input
  /booking/{customer-id}:
    parameters:
      - name: customer-id
        in: path
        schema: { type: string }
        required: true
    get:
      tags:
        - booking
      summary: Query bookings for customer
      description: 
      operationId: queryCustomerBookings
      parameters:
        - name: from
          in: header
          schema:
            type: string
            format: date-time
          required: false
        - name: to
          in: header
          schema:
            type: string
            format: date-time
          required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
                      
        '405':
          description: Invalid input

  /table-order:
    get:
      tags:
        - table-order
      summary: Query table orders
      description: Place a new order in the store
      operationId: queryTableOrders
      parameters:
        - name: table-number
          in: header
          schema: { type: integer }
          required: false
        - name: is-current
          in: header
          schema: { type: boolean }
          required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  /table-order/{table-number}:
    get:
      tags:
        - table-order
      summary: Find the current order for the table
      description: Place a new order in the store
      operationId: findTableOrder
      parameters:
        - name: table-number
          in: path
          schema: { type: integer }
          required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input

    post:
      tags:
        - table-order
      summary: Place an order
      description: Place a new order in the store
      operationId: placeOrder
      parameters:
        - name: table-number
          in: path
          schema: { type: integer }
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  
  /customer-order:
    get:
      tags:
        - customer-order
      summary: Query customer orders
      description: 
      operationId: queryCustomerOrders
      parameters:
        - name: customer-name
          in: header
          schema: { type: string }
          required: false
        - name: is-current
          in: header
          schema: { type: boolean }
          required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerOrder'
        '405':
          description: Invalid input
  /customer-order/{customer-id}:
    parameters:
      - name: customer-id
        in: path
        schema: { type: string }
        required: true
    get:
      tags:
        - customer-order
      summary: Query orders for customer
      description: 
      operationId: queryCustomerOrderForCustomer
      parameters:
        - name: is-current
          in: header
          schema: { type: boolean }
          required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input

    post:
      tags:
        - customer-order
      summary: Place an order
      description:
      operationId: order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input

  /menu/drink:
    get:
      tags:
        - menu
      summary: Get all drink items
      operationId: getDrinkMenu
      responses:
        '200':
          description: List of drink items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Drink'
    post:
      tags:
        - menu
      summary: Add a new drink item
      operationId: addDrinkToMenu
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Drink'
      responses:
        '201':
          description: Drink item added successfully
        '400':
          description: Invalid request
  /menu/drink/{drinkId}:
    parameters:
      - name: drinkId
        in: path
        description: ID of the menu item to retrieve/update/delete
        required: true
        schema:
          type: integer
          format: int64
    get:
      tags:
        - menu
      summary: Get menu item details by ID
      operationId: getDrink
      responses:
        '200':
          description: Menu item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'
        '404':
          description: Menu item not found

    patch:
      tags:
        - menu
      summary: Partially update menu item details by ID using query parameters
      operationId: updateDrink
      parameters:
        - name: name
          in: query
          description: New name for the menu item
          schema:
            type: string
        - name: price
          in: query
          description: New price for the menu item
          schema:
            type: number
      responses:
        '200':
          description: Menu item partially updated successfully
        '404':
          description: Menu item not found
        '400':
          description: Invalid request

    delete:
      tags:
        - menu
      summary: Delete menu item by ID
      operationId: deleteDrink
      responses:
        '204':
          description: Menu item deleted successfully
        '404':
          description: Menu item not found

  /menu/food:
    get:
      tags:
        - menu
      summary: Get all food items
      operationId: getFoodMenu
      responses:
        '200':
          description: List of food items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Food'

    post:
      tags:
        - menu
      summary: Add a new food item
      operationId: addFoodToMenu
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Food'
      responses:
        '201':
          description: Food item added successfully
        '400':
          description: Invalid request

  /menu/food/{foodId}:
    parameters:
      - name: foodId
        in: path
        description: ID of the menu item to retrieve/update/delete
        required: true
        schema:
          type: integer
          format: int64

    get:
      tags:
        - menu
      summary: Get menu item details by ID
      operationId: getFood
      responses:
        '200':
          description: Menu item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'
        '404':
          description: Menu item not found

    put:
      tags:
        - menu
      summary: Update menu item details by ID
      operationId: updateFood
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Food'
      responses:
        '200':
          description: Menu item updated successfully
        '404':
          description: Menu item not found
        '400':
          description: Invalid request

    delete:
      tags:
        - menu
      summary: Delete menu item by ID
      operationId: deleteFood
      responses:
        '204':
          description: Menu item deleted successfully
        '404':
          description: Menu item not found

components:
  schemas:
    Customer:
      required:
        - name
      type: object
      properties:
        userId:
          type: string
          example: ObjectId('6544cd596955fe0a1c04fba9')
        name:
          type: string
          example: Gipsz Jakap
        email:
          type: string
          example: gipsz@jakab.com
    CustomerDetails:
      required:
        - name
      type: object
      properties:
        userId:
          type: string
          example: ObjectId('6544cd596955fe0a1c04fba9')
        name:
          type: string
          example: Gipsz Jakap
        email:
          type: string
          example: gipsz@jakab.com
        mobil:
          type: string
          example: +36709834234
        address:
          type: string
          example: Budapest Lakatos utca 6.
        company:
          type: string
          example: Gipsz Kft.
        tax:
          type: string
          example: 3424-321-323
        points:
          type: integer
          example: 100
        orders:
          type: array
          items:  
            $ref: '#/components/schemas/Order'
    Table:
      required:
        - number
        - capacity
      type: object
      properties:
        number:
          type: integer
          format: int32
          example: 10
        capacity:
          type: integer
          format: int32
          example: 10
        status:
          type: string
          enum:
            - booked
            - free
    Booking:
      required:
        - table
        - customer
        - startingDate
        - endingDate
      type: object
      properties:
        table:
          $ref: '#/components/schemas/Table'
        customer:
          $ref: '#/components/schemas/Customer'
        startingDate:
          type: string
          format: date-time
        endingDate:
          type: string
          format: date-time
    NewBooking:
      required:
        - table-number
        - customer-id
        - startingDate
        - endingDate
      type: object
      properties:
        table-number:
          type: integer
          example: 3
        customer-id:
          type: string
          example: 6544cd596955fe0a1c04fba9
        startingDate:
          type: string
          format: date-time
        endingDate:
          type: string
          format: date-time
    Food:
      required:
        - name
        - price
      type: object
      properties:
        id:
          type: string
          example: 6544cd596955fe0a1c04fba9
        name:
          type: string
          example: Hamburger
        price:
          type: integer
          example: 400
        recipe:
          type: array
          items:
            type: object
            properties:
              ingerient:
                type: string
              unit:
                type: string
                enum:
                  - g
                  - dkg
              quantity:
                type: integer
    FoodOrderItem:
        required:
          - food
          - quantity
        type: object
        properties:
          food: 
            $ref: '#/components/schemas/Food'
          quantity:
            type: integer
            format: int32
            example: 1
    Drink:
      required:
        - name
        - price
      type: object
      properties:
        id:
          type: string
          example: 6544cd596955fe0a1c04fba9
        name:
          type: string
          example: Cola
        price:
          type: integer
          example: 400
    DrinkOrderItem:
        required:
          - drink
          - quantity
        type: object
        properties:
          drink: 
            $ref: '#/components/schemas/Drink'
          quantity:
            type: integer
            format: int32
            example: 1
    Order:
      required:
        - foods
        - drinks
      type: object
      properties:
        id:
          type: string
          example: 6544cd596955fe0a1c04fba9
        status:
          type: string
          enum: [placed, cooking, delivering, delivered]
        foods:
          type: array
          items:
            $ref: '#/components/schemas/FoodOrderItem'
        drinks:
          type: array
          items:
            $ref: '#/components/schemas/DrinkOrderItem'
    CustomerOrder:
      type: object
      properties:
        customer: 
          $ref: '#/components/schemas/Customer'
        order: 
          $ref: '#/components/schemas/Order'
    FoodStockItem:
      required:
        - name
        - quantity
        - unit
      type: object
      properties:
        name:
          type: string
          example: hús
        quantity:
          type: integer
          format: int32
          example: 1
        unit:
          type: string
          example: kg
          enum:
            - kg
            - liter
            - g
            - dkg
            - dl
    DrinkStockItem:
      required:
        - name
        - quantity
      type: object
      properties:
        name:
          type: string
          example: coke
        quantity:
          type: integer
          format: int32
          example: 1
    Employee:
      required:
        - role
      type: object
      properties:
        name:
          type: string
          example: '6544cd596955fe0a1c04fba9'
        userId:
          type: string
          example: Nick Waiter
        role:
          type: string
          enum:
            - waiter
            - manager
    User:
      required:
        - name
        - password
      type: object
      properties:
        name:
          type: string
          example: Nick User
        password:
          type: string
          example: password
    MenuItem:
      type: object
      properties:
        name:
          type: string
        price:
          type: number