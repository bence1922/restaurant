/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package bme.restaurant.api;

import bme.restaurant.dto.TableDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-11-12T22:48:22.982257200+01:00[Europe/Budapest]")
@Validated
@Tag(name = "table", description = "the table API")
public interface TableApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /table/{table-number} : Deletes table by number
     *
     * @param tableNumber number of table to return (required)
     * @return Invalid table id (status code 400)
     */
    @Operation(
        operationId = "deleteTable",
        summary = "Deletes table by number",
        tags = { "table" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid table id")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/table/{table-number}"
    )
    default ResponseEntity<Void> deleteTable(
        @Parameter(name = "table-number", description = "number of table to return", required = true, in = ParameterIn.PATH) @PathVariable("table-number") Integer tableNumber
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /table/{table-number} : Finds table by number
     * Returns a single table
     *
     * @param tableNumber number of table to return (required)
     * @return successful operation (status code 200)
     *         or Invalid table-number supplied (status code 400)
     *         or Table not found (status code 404)
     */
    @Operation(
        operationId = "findTable",
        summary = "Finds table by number",
        description = "Returns a single table",
        tags = { "table" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TableDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid table-number supplied"),
            @ApiResponse(responseCode = "404", description = "Table not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/table/{table-number}",
        produces = { "application/json" }
    )
    default ResponseEntity<TableDTO> findTable(
        @Parameter(name = "table-number", description = "number of table to return", required = true, in = ParameterIn.PATH) @PathVariable("table-number") Integer tableNumber
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"number\" : 10, \"capacity\" : 10, \"status\" : \"booked\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /table : List tables
     * Returns a single table
     *
     * @return successful operation (status code 200)
     *         or Invalid table-number supplied (status code 400)
     *         or Table not found (status code 404)
     */
    @Operation(
        operationId = "listTables",
        summary = "List tables",
        description = "Returns a single table",
        tags = { "table" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TableDTO.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid table-number supplied"),
            @ApiResponse(responseCode = "404", description = "Table not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/table",
        produces = { "application/json" }
    )
    default ResponseEntity<List<TableDTO>> listTables(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"number\" : 10, \"capacity\" : 10, \"status\" : \"booked\" }, { \"number\" : 10, \"capacity\" : 10, \"status\" : \"booked\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /table/{table-number} : Create or update table by number
     *
     * @param tableNumber number of table to return (required)
     * @param capacity  (optional)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "patchTable",
        summary = "Create or update table by number",
        tags = { "table" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TableDTO.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/table/{table-number}",
        produces = { "application/json" }
    )
    default ResponseEntity<TableDTO> patchTable(
        @Parameter(name = "table-number", description = "number of table to return", required = true, in = ParameterIn.PATH) @PathVariable("table-number") Integer tableNumber,
        @Parameter(name = "capacity", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "capacity", required = false) Integer capacity
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"number\" : 10, \"capacity\" : 10, \"status\" : \"booked\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
