/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package bme.restaurant.api;

import bme.restaurant.dto.DrinkDTO;
import bme.restaurant.dto.FoodDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "menu", description = "the menu API")
public interface MenuApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /menu/drink : Add a new drink item
     *
     * @param drinkDTO  (required)
     * @return Drink item added successfully (status code 201)
     *         or Invalid request (status code 400)
     */
    @Operation(
        operationId = "addDrinkToMenu",
        summary = "Add a new drink item",
        tags = { "menu" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Drink item added successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid request")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/menu/drink",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addDrinkToMenu(
        @Parameter(name = "DrinkDTO", description = "", required = true) @Valid @RequestBody DrinkDTO drinkDTO
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /menu/food : Add a new food item
     *
     * @param foodDTO  (required)
     * @return Food item added successfully (status code 201)
     *         or Invalid request (status code 400)
     */
    @Operation(
        operationId = "addFoodToMenu",
        summary = "Add a new food item",
        tags = { "menu" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Food item added successfully"),
            @ApiResponse(responseCode = "400", description = "Invalid request")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/menu/food",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addFoodToMenu(
        @Parameter(name = "FoodDTO", description = "", required = true) @Valid @RequestBody FoodDTO foodDTO
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /menu/drink/{drinkId} : Delete menu item by ID
     *
     * @param drinkId ID of the menu item to retrieve/update/delete (required)
     * @return Menu item deleted successfully (status code 204)
     *         or Menu item not found (status code 404)
     */
    @Operation(
        operationId = "deleteDrink",
        summary = "Delete menu item by ID",
        tags = { "menu" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Menu item deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Menu item not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/menu/drink/{drinkId}"
    )
    default ResponseEntity<Void> deleteDrink(
        @Parameter(name = "drinkId", description = "ID of the menu item to retrieve/update/delete", required = true, in = ParameterIn.PATH) @PathVariable("drinkId") String drinkId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /menu/food/{foodId} : Delete menu item by ID
     *
     * @param foodId ID of the menu item to retrieve/update/delete (required)
     * @return Menu item deleted successfully (status code 204)
     *         or Menu item not found (status code 404)
     */
    @Operation(
        operationId = "deleteFood",
        summary = "Delete menu item by ID",
        tags = { "menu" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Menu item deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Menu item not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/menu/food/{foodId}"
    )
    default ResponseEntity<Void> deleteFood(
        @Parameter(name = "foodId", description = "ID of the menu item to retrieve/update/delete", required = true, in = ParameterIn.PATH) @PathVariable("foodId") String foodId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /menu/drink/{drinkId} : Get menu item details by ID
     *
     * @param drinkId ID of the menu item to retrieve/update/delete (required)
     * @return Menu item details (status code 200)
     *         or Menu item not found (status code 404)
     */
    @Operation(
        operationId = "getDrink",
        summary = "Get menu item details by ID",
        tags = { "menu" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Menu item details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DrinkDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Menu item not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/menu/drink/{drinkId}",
        produces = { "application/json" }
    )
    default ResponseEntity<DrinkDTO> getDrink(
        @Parameter(name = "drinkId", description = "ID of the menu item to retrieve/update/delete", required = true, in = ParameterIn.PATH) @PathVariable("drinkId") String drinkId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"price\" : 400, \"name\" : \"Cola\", \"id\" : \"6544cd596955fe0a1c04fba9\", \"type\" : \"Üdítő\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /menu/drink : Get all drink items
     *
     * @return List of drink items (status code 200)
     */
    @Operation(
        operationId = "getDrinkMenu",
        summary = "Get all drink items",
        tags = { "menu" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of drink items", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DrinkDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/menu/drink",
        produces = { "application/json" }
    )
    default ResponseEntity<List<DrinkDTO>> getDrinkMenu(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"price\" : 400, \"name\" : \"Cola\", \"id\" : \"6544cd596955fe0a1c04fba9\", \"type\" : \"Üdítő\" }, { \"price\" : 400, \"name\" : \"Cola\", \"id\" : \"6544cd596955fe0a1c04fba9\", \"type\" : \"Üdítő\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /menu/food/{foodId} : Get menu item details by ID
     *
     * @param foodId ID of the menu item to retrieve/update/delete (required)
     * @return Menu item details (status code 200)
     *         or Menu item not found (status code 404)
     */
    @Operation(
        operationId = "getFood",
        summary = "Get menu item details by ID",
        tags = { "menu" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Menu item details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FoodDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Menu item not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/menu/food/{foodId}",
        produces = { "application/json" }
    )
    default ResponseEntity<FoodDTO> getFood(
        @Parameter(name = "foodId", description = "ID of the menu item to retrieve/update/delete", required = true, in = ParameterIn.PATH) @PathVariable("foodId") String foodId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"price\" : 400, \"name\" : \"Hamburger\", \"recipe\" : [ { \"unit\" : \"g\", \"quantity\" : 0, \"ingerient\" : \"ingerient\" }, { \"unit\" : \"g\", \"quantity\" : 0, \"ingerient\" : \"ingerient\" } ], \"id\" : \"6544cd596955fe0a1c04fba9\", \"type\" : \"Főétel\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /menu/food : Get all food items
     *
     * @return List of food items (status code 200)
     */
    @Operation(
        operationId = "getFoodMenu",
        summary = "Get all food items",
        tags = { "menu" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of food items", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FoodDTO.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/menu/food",
        produces = { "application/json" }
    )
    default ResponseEntity<List<FoodDTO>> getFoodMenu(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"price\" : 400, \"name\" : \"Hamburger\", \"recipe\" : [ { \"unit\" : \"g\", \"quantity\" : 0, \"ingerient\" : \"ingerient\" }, { \"unit\" : \"g\", \"quantity\" : 0, \"ingerient\" : \"ingerient\" } ], \"id\" : \"6544cd596955fe0a1c04fba9\", \"type\" : \"Főétel\" }, { \"price\" : 400, \"name\" : \"Hamburger\", \"recipe\" : [ { \"unit\" : \"g\", \"quantity\" : 0, \"ingerient\" : \"ingerient\" }, { \"unit\" : \"g\", \"quantity\" : 0, \"ingerient\" : \"ingerient\" } ], \"id\" : \"6544cd596955fe0a1c04fba9\", \"type\" : \"Főétel\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /menu/drink/{drinkId} : Partially update menu item details by ID using query parameters
     *
     * @param drinkId ID of the menu item to retrieve/update/delete (required)
     * @param name New name for the menu item (optional)
     * @param price New price for the menu item (optional)
     * @return Menu item partially updated successfully (status code 200)
     *         or Menu item not found (status code 404)
     *         or Invalid request (status code 400)
     */
    @Operation(
        operationId = "updateDrink",
        summary = "Partially update menu item details by ID using query parameters",
        tags = { "menu" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Menu item partially updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DrinkDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Menu item not found"),
            @ApiResponse(responseCode = "400", description = "Invalid request")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/menu/drink/{drinkId}",
        produces = { "application/json" }
    )
    default ResponseEntity<DrinkDTO> updateDrink(
        @Parameter(name = "drinkId", description = "ID of the menu item to retrieve/update/delete", required = true, in = ParameterIn.PATH) @PathVariable("drinkId") String drinkId,
        @Parameter(name = "name", description = "New name for the menu item", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "price", description = "New price for the menu item", in = ParameterIn.QUERY) @Valid @RequestParam(value = "price", required = false) Integer price
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"price\" : 400, \"name\" : \"Cola\", \"id\" : \"6544cd596955fe0a1c04fba9\", \"type\" : \"Üdítő\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /menu/food/{foodId} : Partially update menu item details by ID using query parameters
     *
     * @param foodId ID of the menu item to retrieve/update/delete (required)
     * @param name New name for the menu item (optional)
     * @param price New price for the menu item (optional)
     * @return Menu item partially updated successfully (status code 200)
     *         or Menu item not found (status code 404)
     *         or Invalid request (status code 400)
     */
    @Operation(
        operationId = "updateFood",
        summary = "Partially update menu item details by ID using query parameters",
        tags = { "menu" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Menu item partially updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FoodDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "Menu item not found"),
            @ApiResponse(responseCode = "400", description = "Invalid request")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/menu/food/{foodId}",
        produces = { "application/json" }
    )
    default ResponseEntity<FoodDTO> updateFood(
        @Parameter(name = "foodId", description = "ID of the menu item to retrieve/update/delete", required = true, in = ParameterIn.PATH) @PathVariable("foodId") String foodId,
        @Parameter(name = "name", description = "New name for the menu item", in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = false) String name,
        @Parameter(name = "price", description = "New price for the menu item", in = ParameterIn.QUERY) @Valid @RequestParam(value = "price", required = false) Integer price
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"price\" : 400, \"name\" : \"Hamburger\", \"recipe\" : [ { \"unit\" : \"g\", \"quantity\" : 0, \"ingerient\" : \"ingerient\" }, { \"unit\" : \"g\", \"quantity\" : 0, \"ingerient\" : \"ingerient\" } ], \"id\" : \"6544cd596955fe0a1c04fba9\", \"type\" : \"Főétel\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
